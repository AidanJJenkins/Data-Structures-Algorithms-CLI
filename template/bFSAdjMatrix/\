package bfsadjmatrix

import (
	"reflect"
	"testing"
)

func TestBFS(t *testing.T) {
	graph := [][]int{
		{0, 1, 1, 0, 0, 0, 0},
		{0, 0, 0, 0, 1, 0, 0},
		{0, 0, 0, 1, 0, 0, 0},
		{0, 0, 0, 0, 0, 1, 0},
		{0, 0, 0, 0, 0, 0, 1},
		{0, 0, 0, 0, 0, 0, 1},
		{0, 0, 0, 0, 0, 0, 0},
	}

	source := 0
	needle := 6

	path, found := BFS(graph, source, needle)

	// Assert path (slice)
	expectedPath := []int{0, 6} // Replace with the expected path
	if !reflect.DeepEqual(path, expectedPath) {
		t.Errorf("Path mismatch. Got %v, expected %v", path, expectedPath)
	}

	// Assert found (bool)
	expectedFound := true // Replace with the expected found value
	if found != expectedFound {
		t.Errorf("Found mismatch. Got %v, expected %v", found, expectedFound)
	}
}

func equal(a, b []int) bool {
	if len(a) != len(b) {
		return false
	}
	for i, val := range a {
		if val != b[i] {
			return false
		}
	}
	return true
}
